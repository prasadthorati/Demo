# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ 2.1-master ]

permissions:
  contents: read

jobs:
  build:

    runs-on: self-hosted
    outputs:
      o-imagename: ${{ steps.set-image-name.outputs.imagename }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Set Image Name
      id: set-image-name
      run: |
          echo "IMAGE_NAME=${{ env.REGISTRY }}/${GITHUB_REPOSITORY,,}/${{ env.SERVICE_NAME }}:$(git rev-parse --short HEAD)" >>${GITHUB_ENV}
          echo "::set-output name=imagename::${{ env.REGISTRY }}/${GITHUB_REPOSITORY,,}/${{ env.SERVICE_NAME }}:$(git rev-parse --short HEAD)"
          
    - name: Build with gradle
      uses: gradle/gradle-build-action@v2
        run:gradle clean build
      
    - name: Edastakhat UI Build
      run: |
           docker build -t ${{ env.IMAGE_NAME }} .
  artifact-upload:
    needs: 
      - build
    runs-on: ed-kube-worker2
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge 
      # with sigstore/fulcio when running outside of PRs.
      id-token: write          
    steps:
    - name: Log into registry ${{ env.REGISTRY }}
      uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.GHCR_USERNAME }}
        password: ${{ secrets.GHCR_PASSWORD }}
    
    - name: Push Docker image
      run: |
          docker images
          docker push ${{needs.build.outputs.o-imagename}}
          docker images
